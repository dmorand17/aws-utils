#!/bin/bash

# Recommended to add an an alias to run this script
#
# alias assume-role="source assume-role $@"

#set -euo pipefail

if [[ $# -lt 1 ]]; then
  echo "[x] Must supply ROLE_ARN!"
  echo "Usage: $(basename "$0") <ROLE_ARN>"
fi

ROLE_ARN="$1"

# Temp file to store assume-role output
TMPFILE=/tmp/aws-session-file

# Duration Time is 30 mins
DEFAULT_DURATION=1800
DURATION=${2:-$DEFAULT_DURATION}

# Create a session name
SESSION_NAME=$(whoami)-$(date +%Y%m%d%H%M)-session
echo "[i] Creating session: $SESSION_NAME for $DURATION seconds..."

if ! aws sts assume-role --duration-seconds "$DURATION" --role-arn "$ROLE_ARN" --role-session-name "$SESSION_NAME" > $TMPFILE
then
  echo "[!] Role Assumption failed."
  echo "Please check that the 'role-arn' is valid and the current session has 'sts:AssumeRole' 'Allow' effect"
  # exit 1
fi

#unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
assume --un

#export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' $TMPFILE)
#export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' $TMPFILE)
#export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' $TMPFILE)

AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' $TMPFILE)
AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' $TMPFILE)
AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' $TMPFILE)

aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile assumed-role
aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile assumed-role
aws configure set aws_session_token $AWS_SESSION_TOKEN --profile assumed-role

export AWS_DEFAULT_PROFILE=assumed-role
export AWS_PROFILE=assumed-role

rm -rf $TMPFILE

echo "[i] Role Assumption has completed successfully"
echo "[i] Getting identity..."

# aws sts get-caller-identity
